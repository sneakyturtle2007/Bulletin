
User Management:

   createuser|<username>|<email>|<password> 
      - Description
         If successful, returns a stringified json object of the structure detailed below. If there is an error, it returns a json of the same structure but with 
		   an error message in the status field.
         {
            status:"Success"
         }
         Users username cannot include the following symbols: @, '', "", or |.
		- Example
			Input: createuser|example_name|example.name@gmail.com|example_password
			Output(No Error): {status:"Success"}
			Output(Error): {status:"<ERROR>"}
			

   deleteuser|<user ID>
      - Description
         If successful, returns a stringified json object of the structure detailed below . If there is an error, it returns a json of the same structure but with 
			an error message in the status field.
         {
            status:"Success"
         }
		- Example
			Input: deleteuser|1
			Output(No Error): {status:"Success"}
			Output(Error): {status:"<ERROR>"}


   login|<username or email>|<password> 
      - Description
         If successful, returns a stringified json object in the structure shown below. If the login is invalid, the json object will only include the status field 
         containing "Invalid credentials". If there is an error, the json object will just include the status field with the error code as the value.
         {
            status:"Success",
            user_id:<integer value>,
            friends:"test1,test2,test3",
            invited:"<eventid>,<eventid>,<eventid>",
            groups:"<groupid>,<groupid>",
         }
      - Example
         Input: login|example_name_or_email|example_password
         Output(No Error): {status:"Success",user_id:1,friends:"friend1,friend2,frien3",invited:"1,2,3",groups:"1,2,3"}
               (Invalid login):  {status:"Invalid credentials"}
         Output(Error): {status:"<Error>"};


   addfriend|<user ID>|<friend username>
      - Description
         If successful, returns a stringified json object of the structure detailed below. If there is an error, it returns a json of the same structure but with 
		   an error message in the status field.
         {
            status:"Success"
         }
         Friends' username cannot include the following symbols: @, '', "", or |.
		- Example
			Input: addfriend|1|friend1
			Output(No Error): {status:"Success"}
			Output(Error): {status:"<ERROR>"}


   removefriend|<username>|<friend username>
      - Description
         If successful, returns a stringified json object of the structure detailed below. If there is an error, it returns a json of the same structure but with 
		   an error message in the status field.
         {
            status:"Success"
         }
         Friends' username cannot include the following symbols: @, '', "", or |.
		- Example
			Input: removefriend|1|friend1
			Output(No Error): {status:"Success"}
			Output(Error): }{status:"<ERROR>"}


Event Management:

   createevent|<user ID>|<title>|<start date>|<end date>|<start time>|<end time>|<location>|<publicity type>|<invitees>|<details>|<groups>
      - Description
         If successful, returns a stringified json object of the structure detailed below. If there is an error, it returns a json object with just the status 
         field containing the error code.
         {
            status:"Success",
            event_id:1
         }
				 Non of the parameters that use text can include: "", '', or |.
      - Example
                                                              Public|Private|Group       
                                      Year Month Day   Military time   |     Usernames of invited  group ID's
                                        |   |  __/          |          |               |              | 
         Input: createevent|1|birthday|2024-2-20|2024-2-20|1600|1600|9900 Jamaica Ave S|Public|friend1,friend2,friend3|1,2,3
         Output(No Error): {status:"Success",event_id:1}
         Output(Error): {status:"<ERROR>"}


   deleteevent|<eventid
      - Description
         If successful, returns a stringified json object wi the structure detailed below. If there is an error, it returns a json object with  just the status 
         field containing the error code.
         {
            status:"Success"
         }
      - Example
         Input: deleteevent|1
         Output(No Error): {status:"Success"}
         Output(Error): {status:"<ERROR>"}
         

   addinvitees|<eventid>|<username of invitee>
      - Description
         If successful, returns a stringified json object of the structure detailed below. If there is an error, it returns a json object with just the status
         field containing the error code.
         {
            status:"Success",
         }
      - Example
         Input: addinvitee|1|friend1
         Output(No Error): {status:"Success"}
         Output(Error): {status:"<ERROR>"}

   
   removeinvitees|<eventid>|<username of invitee(s)>
      - Description
         If successful, returns a stringified json object of the structure detailed below. If there is an error, it returns a json object with just the status
         field containing the error code.
         {
            status:"Success"
         }
      - Example
         Input: removeinvitees|1|friend1,friend2
              	OR removeinvitees|1|friend1
         Output(No Error): {status:"Success"}
         Output(Error): {status:"<ERROR>"}


Calendar Calls:

   getmonthevents|<userid>|<year>|<month>
      - Description 
         If successful, returns a stringified json object with the structure detailed below. If there is an error, it returns the an array with a single json object 
         containing just the status field with the value of the error code.
         [
            {
               status:"Success"
            },
            {
               user_id:1,
               title:"example_title",
               start_date:"Year-Month-Day",
               end_date:"Year-Month-Day",
               start_time:1500,
               end_time:1600,
               location:"9900 Jamaica Ave S",
               publicity_type:"Public",
               invitees:"friend1,friend2",
               details:"The fitness gram pacer test....",
               groups:"1,2,3,4"
            },
            {Copy of structure above}
         ]
		- Example 
         Input: getmonthevents|1|2024|3
         Output(No Error): [{status:"Success"},{user_id:1,title:"birthday",start_date:"2024-3-23",end_date:"2024-4-23",start_time:1500,end_time:1600,
                           location:"9900 Jamaica Ave S", publicity_type:"Public",invitees:"friend1,friend2,friend3",details:"The fitness gram pacer test...",
                           groups:"1,2,3,4"}, ...and so on with more events] 
         Output(Error): [{status:"<ERROR>"}]

